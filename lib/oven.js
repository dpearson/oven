// Generated by CoffeeScript 1.6.3
/*
	Copyright 2012-2014 David Pearson.
	All rights reserved.
*/


(function() {
  var bindir, build, clc, clean, cmd, coffee, coffeelint, coffeelintConfig, fileIs, fs, genCpyFunc, genList, lint, ovenfile, ovenfilePath, pkg, runCmd, runSilent, srcdir, watch, _ref;

  clc = require("cli-color");

  fs = require("fs");

  _ref = require("./cmd"), runCmd = _ref.runCmd, runSilent = _ref.runSilent;

  pkg = __filename.substring(0, __filename.length - 12);

  coffee = "" + pkg + "/node_modules/coffee-script/bin/coffee";

  coffeelint = "" + pkg + "/node_modules/coffeelint/bin/coffeelint";

  coffeelintConfig = "" + pkg + "/coffeelint.json";

  genCpyFunc = function(filename, dest) {
    return function(curr, prev) {
      if (curr.mtime.getTime() !== prev.mtime.getTime()) {
        console.log("cp " + filename + " " + dest);
        return child_process.exec("cp " + filename + " " + dest);
      }
    };
  };

  fileIs = function(name, type) {
    return name.toString().indexOf(type) === name.toString().length - type.length;
  };

  build = function(src, bin) {
    return runCmd(coffee, ["-o", bin, "-c", src], function(code) {
      var binPath, f, srcFiles, srcPath, stat, _i, _len, _results;
      if (code === 0) {
        srcFiles = fs.readdirSync(src);
        _results = [];
        for (_i = 0, _len = srcFiles.length; _i < _len; _i++) {
          f = srcFiles[_i];
          if (f.toString() === ".DS_Store") {
            continue;
          }
          srcPath = src + "/" + f;
          binPath = bin + "/" + f;
          stat = fs.statSync(srcPath);
          if (stat.isDirectory()) {
            if (!fs.existsSync(binPath)) {
              fs.mkdirSync(binPath);
            }
            _results.push(build(srcPath, binPath));
          } else if (fileIs(f, ".js") || fileIs(f, ".json")) {
            _results.push(runCmd("cp", [srcPath, binPath], function(code) {
              if (code !== 0) {
                console.log("Error copying " + srcPath);
                return process.exit(-1);
              }
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else {
        return process.exit(-1);
      }
    });
  };

  watch = function(src, bin) {
    var binPath, f, srcFiles, srcPath, stat, _i, _len, _results;
    runCmd(coffee, ["-w", "-o", bin, "-c", src]);
    srcFiles = fs.readdirSync(src);
    _results = [];
    for (_i = 0, _len = srcFiles.length; _i < _len; _i++) {
      f = srcFiles[_i];
      if (f.toString() === ".DS_Store") {
        continue;
      }
      srcPath = src + "/" + f;
      binPath = bin + "/" + f;
      stat = fs.statSync(srcPath);
      if (stat.isDirectory()) {
        if (!fs.existsSync(binPath)) {
          fs.mkdirSync(binPath);
        }
        _results.push(build(srcPath, binPath));
      } else if (fileIs(f, ".js") || fileIs(f, ".json")) {
        _results.push(fs.watchFile(srcPath, genCpyFunc(srcPath, binPath)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  clean = function(src, bin) {
    var binFiles, binPath, f, stat, _i, _len, _results;
    binFiles = fs.readdirSync(bin);
    _results = [];
    for (_i = 0, _len = binFiles.length; _i < _len; _i++) {
      f = binFiles[_i];
      binPath = bin + "/" + f;
      stat = fs.statSync(binPath);
      if (stat.isDirectory()) {
        _results.push(fs.rmdirSync(binPath));
      } else {
        _results.push(fs.unlink(binPath));
      }
    }
    return _results;
  };

  genList = function(folder, type) {
    var contents, f, files, list, path, stat, _i, _len;
    list = [];
    files = fs.readdirSync(folder);
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      f = files[_i];
      if (f.toString() === ".DS_Store") {
        continue;
      }
      path = folder + "/" + f;
      stat = fs.statSync(path);
      if (stat.isDirectory()) {
        contents = genList(path, type);
        list.push.apply(list, contents);
      } else if (fileIs(f, type)) {
        list.push(path);
      }
    }
    return list;
  };

  lint = function(src, quiet, cb) {
    var args, fileList;
    args = ["-f", coffeelintConfig];
    fileList = genList(src, ".coffee");
    args.push.apply(args, fileList);
    if (!quiet) {
      if (cb != null) {
        return runCmd(coffeelint, args, cb);
      } else {
        return runCmd(coffeelint, args);
      }
    } else {
      return runSilent(coffeelint, args, function(code) {
        if (code === 0) {
          console.log(clc.green("Lint succeeded."));
        } else {
          console.log(clc.red("Lint failed; run 'oven lint' for details."));
        }
        if (cb != null) {
          return cb(code);
        }
      });
    }
  };

  cmd = process.argv[2];

  srcdir = null;

  bindir = null;

  if (cmd === "build" || cmd === "watch" || cmd === "clean" || cmd === "lint") {
    ovenfilePath = process.cwd() + "/Ovenfile";
    if (fs.existsSync(ovenfilePath)) {
      ovenfile = JSON.parse(fs.readFileSync(ovenfilePath));
      srcdir = ovenfile.src;
      bindir = ovenfile.bin;
    } else {
      console.log("An Ovenfile wasn't found in the current directory!");
      process.exit(-1);
    }
  }

  switch (cmd) {
    case "build":
      lint(srcdir, true, function(code) {
        if (code !== -900) {
          build(srcdir, bindir);
          return console.log(clc.green("Build succeeded."));
        }
      });
      break;
    case "watch":
      watch(srcdir, bindir);
      break;
    case "clean":
      clean(srcdir, bindir);
      break;
    case "lint":
      lint(srcdir, false);
  }

}).call(this);
